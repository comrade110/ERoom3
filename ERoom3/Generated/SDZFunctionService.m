/*
	SDZFunctionService.m
	The implementation classes and methods for the FunctionService web service.
	Generated by SudzC.com
*/

#import "SDZFunctionService.h"
				
#import "Soap.h"
	
#import "SDZgameList.h"
#import "SDZnewGameList.h"
#import "SDZmusicList.h"
#import "SDZfindEverydayNewestList.h"
#import "SDZRoom.h"
#import "SDZGame.h"
#import "SDZUser.h"
#import "SDZMusic.h"
#import "SDZint2stringMap.h"
#import "SDZEverydayNewest.h"

/* Implementation of the service */
				
@implementation SDZFunctionService

	- (id) init
	{
		if(self = [super init])
		{
			self.serviceUrl = @"http://192.168.3.108/hotels/services/FunctionService";
			self.namespace = @"http://soap.function/";
			self.headers = nil;
			self.logging = NO;
		}
		return self;
	}
	
	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (SDZFunctionService*) service {
		return [SDZFunctionService serviceWithUsername:nil andPassword:nil];
	}
	
	+ (SDZFunctionService*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[SDZFunctionService alloc] initWithUsername:username andPassword:password];
	}

		
	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findGameByType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId gameType: (NSString*) gameType type: (NSString*) type pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
	{
		return [self findGameByType: handler action: nil sessionId: sessionId gameType: gameType type: type pageNo: pageNo perPageNum: perPageNum];
	}

	- (SoapRequest*) findGameByType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId gameType: (NSString*) gameType type: (NSString*) type pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: gameType forName: @"gameType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: type forName: @"type"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: pageNo forName: @"pageNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: perPageNum forName: @"perPageNum"]];
		NSString* _envelope = [Soap createEnvelope: @"findGameByType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZgameList alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getAllInsFunType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getAllInsFunType: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getAllInsFunType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"getAllInsFunType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZRoom*.  */
	- (SoapRequest*) registerRoom: (id <SoapDelegate>) handler hotelId: (NSString*) hotelId hotelIP: (NSString*) hotelIP macAddress: (NSString*) macAddress padIP: (NSString*) padIP boxMac: (NSString*) boxMac boxIP: (NSString*) boxIP bluetoothMac: (NSString*) bluetoothMac roomNo: (NSString*) roomNo subRoomName: (NSString*) subRoomName ternimalType: (NSString*) ternimalType
	{
		return [self registerRoom: handler action: nil hotelId: hotelId hotelIP: hotelIP macAddress: macAddress padIP: padIP boxMac: boxMac boxIP: boxIP bluetoothMac: bluetoothMac roomNo: roomNo subRoomName: subRoomName ternimalType: ternimalType];
	}

	- (SoapRequest*) registerRoom: (id) _target action: (SEL) _action hotelId: (NSString*) hotelId hotelIP: (NSString*) hotelIP macAddress: (NSString*) macAddress padIP: (NSString*) padIP boxMac: (NSString*) boxMac boxIP: (NSString*) boxIP bluetoothMac: (NSString*) bluetoothMac roomNo: (NSString*) roomNo subRoomName: (NSString*) subRoomName ternimalType: (NSString*) ternimalType
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: hotelId forName: @"hotelId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: hotelIP forName: @"hotelIP"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: macAddress forName: @"macAddress"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: padIP forName: @"padIP"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: boxMac forName: @"boxMac"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: boxIP forName: @"boxIP"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: bluetoothMac forName: @"bluetoothMac"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: roomNo forName: @"roomNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: subRoomName forName: @"subRoomName"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: ternimalType forName: @"ternimalType"]];
		NSString* _envelope = [Soap createEnvelope: @"registerRoom" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZRoom alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getHotelIP: (id <SoapDelegate>) handler macAddress: (NSString*) macAddress
	{
		return [self getHotelIP: handler action: nil macAddress: macAddress];
	}

	- (SoapRequest*) getHotelIP: (id) _target action: (SEL) _action macAddress: (NSString*) macAddress
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: macAddress forName: @"macAddress"]];
		NSString* _envelope = [Soap createEnvelope: @"getHotelIP" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) createSession: (id <SoapDelegate>) handler
	{
		return [self createSession: handler action: nil];
	}

	- (SoapRequest*) createSession: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"createSession" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findRegionType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self findRegionType: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) findRegionType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"findRegionType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZint2stringMap alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findGameType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId gameType: (NSString*) gameType
	{
		return [self findGameType: handler action: nil sessionId: sessionId gameType: gameType];
	}

	- (SoapRequest*) findGameType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId gameType: (NSString*) gameType
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: gameType forName: @"gameType"]];
		NSString* _envelope = [Soap createEnvelope: @"findGameType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZint2stringMap alloc]];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) countGameByType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId gameType: (NSString*) gameType type: (NSString*) type
	{
		return [self countGameByType: handler action: nil sessionId: sessionId gameType: gameType type: type];
	}

	- (SoapRequest*) countGameByType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId gameType: (NSString*) gameType type: (NSString*) type
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: gameType forName: @"gameType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: type forName: @"type"]];
		NSString* _envelope = [Soap createEnvelope: @"countGameByType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getCmdChannelPort: (id <SoapDelegate>) handler
	{
		return [self getCmdChannelPort: handler action: nil];
	}

	- (SoapRequest*) getCmdChannelPort: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getCmdChannelPort" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZRoom*.  */
	- (SoapRequest*) setRoom: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId macAddress: (NSString*) macAddress roomNo: (NSString*) roomNo ip: (NSString*) ip
	{
		return [self setRoom: handler action: nil sessionId: sessionId macAddress: macAddress roomNo: roomNo ip: ip];
	}

	- (SoapRequest*) setRoom: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId macAddress: (NSString*) macAddress roomNo: (NSString*) roomNo ip: (NSString*) ip
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: macAddress forName: @"macAddress"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: roomNo forName: @"roomNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: ip forName: @"ip"]];
		NSString* _envelope = [Soap createEnvelope: @"initRoom" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZRoom alloc]];
		[_request send];
		return _request;
	}

	/* Returns SDZUser*.  */
	- (SoapRequest*) userLogin: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId mobile: (NSString*) mobile password: (NSString*) password
	{
		return [self userLogin: handler action: nil sessionId: sessionId mobile: mobile password: password];
	}

	- (SoapRequest*) userLogin: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId mobile: (NSString*) mobile password: (NSString*) password
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: mobile forName: @"mobile"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: password forName: @"password"]];
		NSString* _envelope = [Soap createEnvelope: @"userLogin" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZUser alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) sysUserLogin: (id <SoapDelegate>) handler userName: (NSString*) userName passowrd: (NSString*) passowrd
	{
		return [self sysUserLogin: handler action: nil userName: userName passowrd: passowrd];
	}

	- (SoapRequest*) sysUserLogin: (id) _target action: (SEL) _action userName: (NSString*) userName passowrd: (NSString*) passowrd
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: userName forName: @"userName"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: passowrd forName: @"passowrd"]];
		NSString* _envelope = [Soap createEnvelope: @"sysUserLogin" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findNewGame: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId gameType: (NSString*) gameType num: (NSString*) num
	{
		return [self findNewGame: handler action: nil sessionId: sessionId gameType: gameType num: num];
	}

	- (SoapRequest*) findNewGame: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId gameType: (NSString*) gameType num: (NSString*) num
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: gameType forName: @"gameType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: num forName: @"num"]];
		NSString* _envelope = [Soap createEnvelope: @"findNewGame" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZnewGameList alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getInstrctions: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId funTypeId: (NSString*) funTypeId
	{
		return [self getInstrctions: handler action: nil sessionId: sessionId funTypeId: funTypeId];
	}

	- (SoapRequest*) getInstrctions: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId funTypeId: (NSString*) funTypeId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: funTypeId forName: @"funTypeId"]];
		NSString* _envelope = [Soap createEnvelope: @"getInstrctions" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) countMusicByCondition: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId name: (NSString*) name regionType: (NSString*) regionType musicType: (NSString*) musicType
	{
		return [self countMusicByCondition: handler action: nil sessionId: sessionId name: name regionType: regionType musicType: musicType];
	}

	- (SoapRequest*) countMusicByCondition: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId name: (NSString*) name regionType: (NSString*) regionType musicType: (NSString*) musicType
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: name forName: @"name"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: regionType forName: @"regionType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: musicType forName: @"musicType"]];
		NSString* _envelope = [Soap createEnvelope: @"countMusicByCondition" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) findPadBoxRelationBack: (id <SoapDelegate>) handler roomId: (NSString*) roomId mac: (NSString*) mac
	{
		return [self findPadBoxRelationBack: handler action: nil roomId: roomId mac: mac];
	}

	- (SoapRequest*) findPadBoxRelationBack: (id) _target action: (SEL) _action roomId: (NSString*) roomId mac: (NSString*) mac
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: roomId forName: @"roomId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: mac forName: @"mac"]];
		NSString* _envelope = [Soap createEnvelope: @"findPadBoxRelationBack" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getDeviceFiles: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getDeviceFiles: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getDeviceFiles: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"getDeviceFiles" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) countEverydayNewestByCondtion: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId name: (NSString*) name beginTime: (NSString*) beginTime endTime: (NSString*) endTime type: (NSString*) type
	{
		return [self countEverydayNewestByCondtion: handler action: nil sessionId: sessionId name: name beginTime: beginTime endTime: endTime type: type];
	}

	- (SoapRequest*) countEverydayNewestByCondtion: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId name: (NSString*) name beginTime: (NSString*) beginTime endTime: (NSString*) endTime type: (NSString*) type
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: name forName: @"name"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: beginTime forName: @"beginTime"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: endTime forName: @"endTime"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: type forName: @"type"]];
		NSString* _envelope = [Soap createEnvelope: @"countEverydayNewestByCondtion" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) findNickNameIsUsed: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userId: (NSString*) userId nickName: (NSString*) nickName
	{
		return [self findNickNameIsUsed: handler action: nil sessionId: sessionId userId: userId nickName: nickName];
	}

	- (SoapRequest*) findNickNameIsUsed: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userId: (NSString*) userId nickName: (NSString*) nickName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: userId forName: @"userId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: nickName forName: @"nickName"]];
		NSString* _envelope = [Soap createEnvelope: @"findNickNameIsUsed" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findMusicByCondition: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId name: (NSString*) name regionType: (NSString*) regionType musicType: (NSString*) musicType pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
	{
		return [self findMusicByCondition: handler action: nil sessionId: sessionId name: name regionType: regionType musicType: musicType pageNo: pageNo perPageNum: perPageNum];
	}

	- (SoapRequest*) findMusicByCondition: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId name: (NSString*) name regionType: (NSString*) regionType musicType: (NSString*) musicType pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: name forName: @"name"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: regionType forName: @"regionType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: musicType forName: @"musicType"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: pageNo forName: @"pageNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: perPageNum forName: @"perPageNum"]];
		NSString* _envelope = [Soap createEnvelope: @"findMusicByCondition" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZmusicList alloc]];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) getHotelId: (id <SoapDelegate>) handler
	{
		return [self getHotelId: handler action: nil];
	}

	- (SoapRequest*) getHotelId: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getHotelId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) findPadBoxRelation: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self findPadBoxRelation: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) findPadBoxRelation: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"findPadBoxRelation" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) deleteRoom: (id <SoapDelegate>) handler roomId: (NSString*) roomId
	{
		return [self deleteRoom: handler action: nil roomId: roomId];
	}

	- (SoapRequest*) deleteRoom: (id) _target action: (SEL) _action roomId: (NSString*) roomId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: roomId forName: @"roomId"]];
		NSString* _envelope = [Soap createEnvelope: @"deleteRoom" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getAndroidProgram: (id <SoapDelegate>) handler
	{
		return [self getAndroidProgram: handler action: nil];
	}

	- (SoapRequest*) getAndroidProgram: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getAndroidProgram" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) findMobileIsUsed: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userId: (NSString*) userId mobile: (NSString*) mobile
	{
		return [self findMobileIsUsed: handler action: nil sessionId: sessionId userId: userId mobile: mobile];
	}

	- (SoapRequest*) findMobileIsUsed: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userId: (NSString*) userId mobile: (NSString*) mobile
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: userId forName: @"userId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: mobile forName: @"mobile"]];
		NSString* _envelope = [Soap createEnvelope: @"findMobileIsUsed" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZUser*.  */
	- (SoapRequest*) refreshUser: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self refreshUser: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) refreshUser: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"refreshUser" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZUser alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) sendAndroidUpdateNoticeNotNeed: (id <SoapDelegate>) handler mac: (NSString*) mac
	{
		return [self sendAndroidUpdateNoticeNotNeed: handler action: nil mac: mac];
	}

	- (SoapRequest*) sendAndroidUpdateNoticeNotNeed: (id) _target action: (SEL) _action mac: (NSString*) mac
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: mac forName: @"mac"]];
		NSString* _envelope = [Soap createEnvelope: @"sendAndroidUpdateNoticeNotNeed" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getAndroidUpdateNotice: (id <SoapDelegate>) handler mac: (NSString*) mac
	{
		return [self getAndroidUpdateNotice: handler action: nil mac: mac];
	}

	- (SoapRequest*) getAndroidUpdateNotice: (id) _target action: (SEL) _action mac: (NSString*) mac
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: mac forName: @"mac"]];
		NSString* _envelope = [Soap createEnvelope: @"getAndroidUpdateNotice" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getRegisterRoomProgram: (id <SoapDelegate>) handler
	{
		return [self getRegisterRoomProgram: handler action: nil];
	}

	- (SoapRequest*) getRegisterRoomProgram: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getRegisterRoomProgram" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getPadOrBoxProgram: (id <SoapDelegate>) handler macAddress: (NSString*) macAddress
	{
		return [self getPadOrBoxProgram: handler action: nil macAddress: macAddress];
	}

	- (SoapRequest*) getPadOrBoxProgram: (id) _target action: (SEL) _action macAddress: (NSString*) macAddress
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: macAddress forName: @"macAddress"]];
		NSString* _envelope = [Soap createEnvelope: @"getPadOrBoxProgram" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns id.  */
	- (SoapRequest*) registerUser: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId nickName: (NSString*) nickName mobile: (NSString*) mobile password: (NSString*) password identityNo: (NSString*) identityNo
	{
		return [self registerUser: handler action: nil sessionId: sessionId nickName: nickName mobile: mobile password: password identityNo: identityNo];
	}

	- (SoapRequest*) registerUser: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId nickName: (NSString*) nickName mobile: (NSString*) mobile password: (NSString*) password identityNo: (NSString*) identityNo
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: nickName forName: @"nickName"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: mobile forName: @"mobile"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: password forName: @"password"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: identityNo forName: @"identityNo"]];
		NSString* _envelope = [Soap createEnvelope: @"registerUser" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: nil];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getWeather: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getWeather: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getWeather: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"getWeather" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getIdcProvince: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getIdcProvince: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getIdcProvince: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"getIdcProvince" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getPlatformConfiguration: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getPlatformConfiguration: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getPlatformConfiguration: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"getPlatformConfiguration" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns id.  */
	- (SoapRequest*) recordFunctionLog: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId functionId: (NSString*) functionId
	{
		return [self recordFunctionLog: handler action: nil sessionId: sessionId functionId: functionId];
	}

	- (SoapRequest*) recordFunctionLog: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId functionId: (NSString*) functionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: functionId forName: @"functionId"]];
		NSString* _envelope = [Soap createEnvelope: @"recordFunctionLog" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: nil];
		[_request send];
		return _request;
	}

	/* Returns id.  */
	- (SoapRequest*) setLanguage: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId language: (NSString*) language country: (NSString*) country
	{
		return [self setLanguage: handler action: nil sessionId: sessionId language: language country: country];
	}

	- (SoapRequest*) setLanguage: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId language: (NSString*) language country: (NSString*) country
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: language forName: @"language"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: country forName: @"country"]];
		NSString* _envelope = [Soap createEnvelope: @"setLanguage" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: nil];
		[_request send];
		return _request;
	}

	/* Returns id.  */
	- (SoapRequest*) logout: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self logout: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) logout: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"logout" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: nil];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getAllDeviceType: (id <SoapDelegate>) handler
	{
		return [self getAllDeviceType: handler action: nil];
	}

	- (SoapRequest*) getAllDeviceType: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getAllDeviceType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) sendMobileValidateCode: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId mobile: (NSString*) mobile
	{
		return [self sendMobileValidateCode: handler action: nil sessionId: sessionId mobile: mobile];
	}

	- (SoapRequest*) sendMobileValidateCode: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId mobile: (NSString*) mobile
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: mobile forName: @"mobile"]];
		NSString* _envelope = [Soap createEnvelope: @"sendMobileValidateCode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findMusicType: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self findMusicType: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) findMusicType: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"findMusicType" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZint2stringMap alloc]];
		[_request send];
		return _request;
	}

	/* Returns SDZRoom*.  */
	- (SoapRequest*) setRoomBack: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId macAddress: (NSString*) macAddress roomNo: (NSString*) roomNo ip: (NSString*) ip
	{
		return [self setRoomBack: handler action: nil sessionId: sessionId macAddress: macAddress roomNo: roomNo ip: ip];
	}

	- (SoapRequest*) setRoomBack: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId macAddress: (NSString*) macAddress roomNo: (NSString*) roomNo ip: (NSString*) ip
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: macAddress forName: @"macAddress"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: roomNo forName: @"roomNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: ip forName: @"ip"]];
		NSString* _envelope = [Soap createEnvelope: @"initRoomBack" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZRoom alloc]];
		[_request send];
		return _request;
	}

	/* Returns id.  */
	- (SoapRequest*) noOperation: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self noOperation: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) noOperation: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"noOperation" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: nil];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findEverydayNewestByCondition: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId name: (NSString*) name beginTime: (NSString*) beginTime endTime: (NSString*) endTime type: (NSString*) type pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
	{
		return [self findEverydayNewestByCondition: handler action: nil sessionId: sessionId name: name beginTime: beginTime endTime: endTime type: type pageNo: pageNo perPageNum: perPageNum];
	}

	- (SoapRequest*) findEverydayNewestByCondition: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId name: (NSString*) name beginTime: (NSString*) beginTime endTime: (NSString*) endTime type: (NSString*) type pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: name forName: @"name"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: beginTime forName: @"beginTime"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: endTime forName: @"endTime"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: type forName: @"type"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: pageNo forName: @"pageNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: perPageNum forName: @"perPageNum"]];
		NSString* _envelope = [Soap createEnvelope: @"findEverydayNewestByCondition" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZfindEverydayNewestList alloc]];
		[_request send];
		return _request;
	}


@end
	