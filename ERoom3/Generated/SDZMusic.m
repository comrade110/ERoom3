/*
	SDZMusic.h
	The implementation of properties and methods for the SDZMusic object.
	Generated by SudzC.com
*/
#import "SDZMusic.h"

@implementation SDZMusic
	@synthesize combType = _combType;
	@synthesize _id = __id;
	@synthesize lyric = _lyric;
	@synthesize lyricFileRef = _lyricFileRef;
	@synthesize musicFile = _musicFile;
	@synthesize musicName = _musicName;
	@synthesize musicType = _musicType;
	@synthesize recomment = _recomment;
	@synthesize regionType = _regionType;
	@synthesize releaseTime = _releaseTime;
	@synthesize singer = _singer;
	@synthesize singerImage = _singerImage;
	@synthesize specialImage = _specialImage;
	@synthesize specialName = _specialName;
	@synthesize useCount = _useCount;

	- (id) init
	{
		if(self = [super init])
		{
			self.lyric = nil;
			self.lyricFileRef = nil;
			self.musicFile = nil;
			self.musicName = nil;
			self.releaseTime = nil;
			self.singer = nil;
			self.singerImage = nil;
			self.specialImage = nil;
			self.specialName = nil;

		}
		return self;
	}

	+ (SDZMusic*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZMusic*)[[SDZMusic alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.combType = [[Soap getNodeValue: node withName: @"combType"] intValue];
			self._id = [[Soap getNodeValue: node withName: @"id"] longLongValue];
			self.lyric = [Soap getNodeValue: node withName: @"lyric"];
			self.lyricFileRef = [Soap getNodeValue: node withName: @"lyricFileRef"];
			self.musicFile = [Soap getNodeValue: node withName: @"musicFile"];
			self.musicName = [Soap getNodeValue: node withName: @"musicName"];
			self.musicType = [[Soap getNodeValue: node withName: @"musicType"] intValue];
			self.recomment = [[Soap getNodeValue: node withName: @"recomment"] intValue];
			self.regionType = [[Soap getNodeValue: node withName: @"regionType"] intValue];
			self.releaseTime = [Soap getNodeValue: node withName: @"releaseTime"];
			self.singer = [Soap getNodeValue: node withName: @"singer"];
			self.singerImage = [Soap getNodeValue: node withName: @"singerImage"];
			self.specialImage = [Soap getNodeValue: node withName: @"specialImage"];
			self.specialName = [Soap getNodeValue: node withName: @"specialName"];
			self.useCount = [[Soap getNodeValue: node withName: @"useCount"] longLongValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"Music"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<combType>%@</combType>", [NSString stringWithFormat: @"%i", self.combType]];
		[s appendFormat: @"<id>%@</id>", [NSString stringWithFormat: @"%ld", self._id]];
		if (self.lyric != nil) [s appendFormat: @"<lyric>%@</lyric>", [[self.lyric stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.lyricFileRef != nil) [s appendFormat: @"<lyricFileRef>%@</lyricFileRef>", [[self.lyricFileRef stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.musicFile != nil) [s appendFormat: @"<musicFile>%@</musicFile>", [[self.musicFile stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.musicName != nil) [s appendFormat: @"<musicName>%@</musicName>", [[self.musicName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<musicType>%@</musicType>", [NSString stringWithFormat: @"%i", self.musicType]];
		[s appendFormat: @"<recomment>%@</recomment>", [NSString stringWithFormat: @"%i", self.recomment]];
		[s appendFormat: @"<regionType>%@</regionType>", [NSString stringWithFormat: @"%i", self.regionType]];
		if (self.releaseTime != nil) [s appendFormat: @"<releaseTime>%@</releaseTime>", [[self.releaseTime stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.singer != nil) [s appendFormat: @"<singer>%@</singer>", [[self.singer stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.singerImage != nil) [s appendFormat: @"<singerImage>%@</singerImage>", [[self.singerImage stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.specialImage != nil) [s appendFormat: @"<specialImage>%@</specialImage>", [[self.specialImage stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.specialName != nil) [s appendFormat: @"<specialName>%@</specialName>", [[self.specialName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<useCount>%@</useCount>", [NSString stringWithFormat: @"%ld", self.useCount]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZMusic class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
