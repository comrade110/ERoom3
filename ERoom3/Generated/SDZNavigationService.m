/*
	SDZNavigationService.m
	The implementation classes and methods for the NavigationService web service.
	Generated by SudzC.com
*/

#import "SDZNavigationService.h"
				
#import "Soap.h"
	
#import "SDZModuleList.h"
#import "SDZRelationList.h"
#import "SDZContentList.h"
#import "SDZArrayOfCatalog.h"
#import "SDZContType.h"
#import "SDZCatalogGroup.h"
#import "SDZCatalog.h"
#import "SDZContTypeField2stringMap.h"
#import "SDZContType2CatalogGroup2ArrayOfCatalogMapMap.h"
#import "SDZCatalogGroup2ArrayOfCatalogMap.h"
#import "SDZModule.h"
#import "SDZRelation.h"
#import "SDZContTypeField.h"
#import "SDZContent.h"

/* Implementation of the service */
				
@implementation SDZNavigationService

	- (id) init
	{
		if(self = [super init])
		{
			self.serviceUrl = @"http://192.168.3.108/hotels/services/NavigationService";
			self.namespace = @"http://soap.navigation/";
			self.headers = nil;
			self.logging = NO;
		}
		return self;
	}
	
	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (SDZNavigationService*) service {
		return [SDZNavigationService serviceWithUsername:nil andPassword:nil];
	}
	
	+ (SDZNavigationService*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[SDZNavigationService alloc] initWithUsername:username andPassword:password];
	}

		
	/* Returns NSNumber.  */
	- (SoapRequest*) countContentInfo: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId catalogIds: (NSString*) catalogIds
	{
		return [self countContentInfo: handler action: nil sessionId: sessionId contTypeId: contTypeId catalogIds: catalogIds];
	}

	- (SoapRequest*) countContentInfo: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId catalogIds: (NSString*) catalogIds
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contTypeId forName: @"contTypeId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: catalogIds forName: @"catalogIds"]];
		NSString* _envelope = [Soap createEnvelope: @"countContentInfo" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findAllModules: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self findAllModules: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) findAllModules: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		NSString* _envelope = [Soap createEnvelope: @"findAllModules" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZModuleList alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findSingleContentRelations: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId contId: (NSString*) contId
	{
		return [self findSingleContentRelations: handler action: nil sessionId: sessionId contTypeId: contTypeId contId: contId];
	}

	- (SoapRequest*) findSingleContentRelations: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId contId: (NSString*) contId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contTypeId forName: @"contTypeId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contId forName: @"contId"]];
		NSString* _envelope = [Soap createEnvelope: @"findSingleContentRelations" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZRelationList alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findSingleContentDetails: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId contId: (NSString*) contId
	{
		return [self findSingleContentDetails: handler action: nil sessionId: sessionId contTypeId: contTypeId contId: contId];
	}

	- (SoapRequest*) findSingleContentDetails: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId contId: (NSString*) contId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contTypeId forName: @"contTypeId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contId forName: @"contId"]];
		NSString* _envelope = [Soap createEnvelope: @"findSingleContentDetails" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZContTypeField2stringMap alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSNumber.  */
	- (SoapRequest*) getMoudleIdByModuleEntry: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId moduleEntry: (NSString*) moduleEntry
	{
		return [self getMoudleIdByModuleEntry: handler action: nil sessionId: sessionId moduleEntry: moduleEntry];
	}

	- (SoapRequest*) getMoudleIdByModuleEntry: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId moduleEntry: (NSString*) moduleEntry
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: moduleEntry forName: @"moduleEntry"]];
		NSString* _envelope = [Soap createEnvelope: @"getMoudleIdByModuleEntry" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"int"];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findSingleContentRelationContentInfo: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId relationId: (NSString*) relationId contId: (NSString*) contId pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
	{
		return [self findSingleContentRelationContentInfo: handler action: nil sessionId: sessionId contTypeId: contTypeId relationId: relationId contId: contId pageNo: pageNo perPageNum: perPageNum];
	}

	- (SoapRequest*) findSingleContentRelationContentInfo: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId relationId: (NSString*) relationId contId: (NSString*) contId pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contTypeId forName: @"contTypeId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: relationId forName: @"relationId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contId forName: @"contId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: pageNo forName: @"pageNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: perPageNum forName: @"perPageNum"]];
		NSString* _envelope = [Soap createEnvelope: @"findSingleContentRelationContentInfo" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZContentList alloc]];
		[_request send];
		return _request;
	}

	/* Returns SDZContType*.  */
	- (SoapRequest*) findContTypeAndCatalogGroupAndCatalog: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId moduleId: (NSString*) moduleId
	{
		return [self findContTypeAndCatalogGroupAndCatalog: handler action: nil sessionId: sessionId moduleId: moduleId];
	}

	- (SoapRequest*) findContTypeAndCatalogGroupAndCatalog: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId moduleId: (NSString*) moduleId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: moduleId forName: @"moduleId"]];
		NSString* _envelope = [Soap createEnvelope: @"findContTypeAndCatalogGroupAndCatalog" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZContType alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*.  */
	- (SoapRequest*) findContentInfo: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId catalogIds: (NSString*) catalogIds pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
	{
		return [self findContentInfo: handler action: nil sessionId: sessionId contTypeId: contTypeId catalogIds: catalogIds pageNo: pageNo perPageNum: perPageNum];
	}

	- (SoapRequest*) findContentInfo: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId contTypeId: (NSString*) contTypeId catalogIds: (NSString*) catalogIds pageNo: (NSString*) pageNo perPageNum: (NSString*) perPageNum
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: contTypeId forName: @"contTypeId"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: catalogIds forName: @"catalogIds"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: pageNo forName: @"pageNo"]];
		[_params addObject: [[SoapParameter alloc] initWithValue: perPageNum forName: @"perPageNum"]];
		NSString* _envelope = [Soap createEnvelope: @"findContentInfo" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [SDZContentList alloc]];
		[_request send];
		return _request;
	}


@end
	